package nl.umcg.suresnp.pipeline;

import org.apache.commons.cli.*;
import org.apache.log4j.Logger;

import java.io.IOException;

import static java.lang.System.exit;

public class IpcrToolParameters {

    private final Logger LOGGER = Logger.getLogger(IpcrToolParameters.class);
    private final CommandLine cmd;
    private static final Options OPTIONS;
    private String toolType;

    static {
        OPTIONS = new Options();
        Option option;

        option = Option.builder("T")
                .longOpt("tool")
                .hasArg(true)
                .desc("The tool to apply:\n" +
                        "* MergeBamWithBarcodes: Merge a IPCR (cutadapt) info file and the final alignment BAM file.\n" +
                        "                     BAM file MUST be sorted on query name (implemented this way for efficiency).\n" +
                        "-----------------------------------------------------------------------\n" +
                        "* AssignVariantAlleles: Read a IPCR file generated by 'MergeBamWithBarcodes | sort -k 1,1 | uniq -c'\n" +
                        "                 and collapse the records so that barcodes appearing multiple times are\n" +
                        "                 collapsed on the record with the highest duplicate count.\n" +
                        "                 File MUST be sorted on barcode (for now). After collapsing add the\n" +
                        "                 variants located in each read based on the provided VCF")
                .argName("path/to/file")
                .build();
        OPTIONS.addOption(option);

        option = Option.builder("h")
                .longOpt("help")
                .desc("Print usage")
                .build();
        OPTIONS.addOption(option);
    }

    public IpcrToolParameters(String[] args) throws ParseException, IOException {
        CommandLineParser parser = new DefaultParser();
        cmd = parser.parse(OPTIONS, args, true);

        // Print help and exit
        if (cmd.hasOption("h")) {
            printHelp();
            exit(0);
        }

        if (!cmd.hasOption("T")) {
            LOGGER.error("Missing required option -T");
            printHelp();
            exit(1);
        }

        toolType = cmd.getOptionValue('T').trim();

    }

    public CommandLine getCmd() {
        return cmd;
    }

    public static Options getOptions() {
        return OPTIONS;
    }

    public String getToolType() {
        return toolType;
    }

    public static void printHelp() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(999);
        formatter.printHelp(" ", OPTIONS);
    }
}

