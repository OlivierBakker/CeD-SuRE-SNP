package nl.umcg.suresnp.pipeline;

import nl.umcg.suresnp.pipeline.io.icpr.*;
import org.apache.commons.cli.*;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import java.io.File;
import java.io.IOException;

import static java.lang.System.exit;


public class IpcrToolsParameters {


    private final Logger LOGGER = Logger.getLogger(IpcrToolsParameters.class);
    private final CommandLine cmd;


    // IO arguments
    private String inputBam;
    private String barcodeFile;
    private String outputPrefix;
    private String outputSuffix;
    private String inputVcf;
    private boolean isStdoutput;
    private boolean isReduced;
    private IpcrOutputWriter outputWriter;


    private String toolType;
    private static final Options OPTIONS;

    static {
        OPTIONS = new Options();
        Option option;

        option = Option.builder("T")
                .longOpt("tool")
                .hasArg(true)
                .desc("The tool to apply:\n" +
                        "* MergeBamWithBarcodes: Merge a IPCR (cutadapt) info file and the final alignment BAM file.\n" +
                        "                     BAM file MUST be sorted on query name (implemented this way for efficiency).\n" +
                        "-----------------------------------------------------------------------\n" +
                        "* AssignVariantAlleles: Read a IPCR file generated by 'MergeBamWithBarcodes | sort -k 1,1 | uniq -c'\n" +
                        "                 and collapse the records so that barcodes appearing multiple times are\n" +
                        "                 collapsed on the record with the highest duplicate count.\n" +
                        "                 File MUST be sorted on barcode (for now). After collapsing add the\n" +
                        "                 variants located in each read based on the provided VCF")
                .argName("path/to/file")
                .build();
        OPTIONS.addOption(option);

        option = Option.builder("i")
                .longOpt("input-bam")
                .hasArg(true)
                .desc("Input bamfile SORTED ON QUERY NAME!!!!!")
                .argName("path/to/file")
                .build();
        OPTIONS.addOption(option);

        option = Option.builder("b")
                .longOpt("barcode-info")
                .hasArg(true)
                .desc("The file containing read names and barcodes")
                .argName("path/to/file")
                .build();
        OPTIONS.addOption(option);

        option = Option.builder("o")
                .longOpt("output")
                .hasArg(true)
                .desc("Output prefix")
                .argName("path/to/output")
                .build();
        OPTIONS.addOption(option);

        option = Option.builder("s")
                .longOpt("stdout")
                .desc("Pipe output to stdout instead of to a file. Will omit logging of warnings, info and debug.")
                .build();
        OPTIONS.addOption(option);

        option = Option.builder("g")
                .longOpt("input-genotype")
                .hasArg(true)
                .desc("Currently only supports VCF")
                .build();
        OPTIONS.addOption(option);

        option = Option.builder("h")
                .longOpt("help")
                .desc("Print usage")
                .build();
        OPTIONS.addOption(option);

        option = Option.builder("r")
                .longOpt("reduced")
                .desc("Print reduced output (without the sequences, cigars and variant info. " +
                        "Variant info is written to a separate file. Can be used to save space when using a large library)")
                .build();
        OPTIONS.addOption(option);

    }


    public IpcrToolsParameters(String[] args) throws ParseException, IOException {
        CommandLineParser parser = new DefaultParser();
        cmd = parser.parse(IpcrToolsParameters.getOptions(), args);

        // Print help and exit
        if (cmd.hasOption("h")) {
            IpcrToolsParameters.printHelp();
            exit(0);
        }

        if (!cmd.hasOption("T")) {
            LOGGER.error("Missing required option -T");
            IpcrToolsParameters.printHelp();
            exit(1);
        }


        // Input files
        inputBam = cmd.getOptionValue("p").trim();
        inputVcf = cmd.getOptionValue("g").trim();


        // Define the output writer, either stdout or to file
        outputPrefix = cmd.getOptionValue("o").trim();

        if (cmd.hasOption("s")) {
            // When writing to stdout do not use log4j unless there is an error
            if (cmd.hasOption("r")) {
                outputWriter = new SimpleIpcrStdoutWriter();
            } else {
                outputWriter = new IpcrStdoutWriter();
            }
            Logger.getRootLogger().setLevel(Level.ERROR);

        } else {
            // When writing to a file check if the correct options are specified
            if (!cmd.hasOption("o")) {
                LOGGER.error("-o not specified");
                IpcrToolsParameters.printHelp();
                exit(1);
            }

            boolean zipped = false;
            outputSuffix = "";
            if (cmd.hasOption("z")) {
                zipped = true;
                outputSuffix = ".gz";
            }

            if (cmd.hasOption("r")) {
                outputWriter = new SimpleIpcrOutputFileWriter(new File( outputPrefix+ ".reduced.ipcr" + outputSuffix), zipped);
            } else {
                outputWriter = new IpcrOutputFileWriter(new File(outputPrefix + ".full.ipcr" + outputSuffix), zipped);
            }
        }

        // Select which tool to run
        switch (cmd.getOptionValue("T").trim()) {
            case "MergeBamWithBarcodes":
                toolType="MergeBamWithBarcodes";
                break;
            case "AssignVariantAlleles":
                toolType="AssignVariantAlleles";
                break;
            default:
                IpcrToolsParameters.printHelp();
                exit(1);
        }

    }

    public String getInputBam() {
        return inputBam;
    }

    public String getBarcodeFile() {
        return barcodeFile;
    }

    public String getOutputPrefix() {
        return outputPrefix;
    }

    public String getOutputSuffix() {
        return outputSuffix;
    }

    public String getInputVcf() {
        return inputVcf;
    }

    public boolean isStdoutput() {
        return isStdoutput;
    }

    public boolean isReduced() {
        return isReduced;
    }

    public static Options getOPTIONS() {
        return OPTIONS;
    }

    public IpcrOutputWriter getOutputWriter() {
        return outputWriter;
    }

    public String getToolType() {
        return toolType;
    }

    public static Options getOptions() {
        return OPTIONS;
    }

    public static void printHelp() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(999);
        formatter.printHelp(" ", OPTIONS);
    }
}
